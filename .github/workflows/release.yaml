name: Publish and Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  version_bump_and_publish:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for all tags and branches

      - name: Set up Python version from file
        uses: actions/setup-python@v4
        with:
          python-version-file: .python-version

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -

      - name: Bump version
        run: |
          poetry version patch
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add pyproject.toml
          git commit -m "Bump version to $(poetry version -s)"

      - name: Get new version
        id: get_new_version
        run: echo "NEW_VERSION=$(poetry version -s)" >> $GITHUB_ENV

      - name: Create new tag
        run: |
          git tag v${{ env.NEW_VERSION }}

      - name: Push changes and tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git push origin main --tags

      - name: Install dependencies
        run: poetry install

      - name: Build and publish
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.POETRY_PYPI_TOKEN_PYPI }}
        run: |
          poetry publish --build

      - name: Get previous version tag
        id: get_previous_version_tag
        run: |
          PREVIOUS_TAG=$(git describe --tags $(git rev-list --tags --skip=1 --max-count=1))
          echo "PREVIOUS_TAG=$PREVIOUS_TAG" >> $GITHUB_ENV

      - name: Generate release notes
        id: generate_release_notes
        run: |
          echo "Changes in this release:" > release_notes.md
          git log ${{ env.PREVIOUS_TAG }}..HEAD --pretty=format:"- %s ([%h](https://github.com/${{ github.repository }}/commit/%H))" >> release_notes.md
          echo "" >> release_notes.md
          echo "[View details on PyPI](https://pypi.org/project/interfaces-to/${{ env.NEW_VERSION }}/)" >> release_notes.md
          echo "" >> release_notes.md
          echo "To upgrade via pip:" >> release_notes.md
          echo "\`\`\`" >> release_notes.md
          echo "pip install --upgrade interfaces-to" >> release_notes.md
          echo "\`\`\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "To upgrade via poetry:" >> release_notes.md
          echo "\`\`\`" >> release_notes.md
          echo "poetry add interfaces-to@${{ env.NEW_VERSION }}" >> release_notes.md
          echo "\`\`\`" >> release_notes.md

      - name: Output release notes for debugging
        run: cat release_notes.md

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.NEW_VERSION }}
          release_name: Release v${{ env.NEW_VERSION }}
          body_path: release_notes.md

      - name: Prevent publish trigger
        run: echo "Skipped publish" > skip_publish.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
